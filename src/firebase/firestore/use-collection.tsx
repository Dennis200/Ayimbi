// DO NOT MANUALLY EDIT THIS FILE. IT IS AUTO-GENERATED BY FIREBASE STUDIO.
'use client';
import {useState, useEffect, useMemo} from 'react';
import {
  getFirestore,
  onSnapshot,
  collection,
  query,
  where,
  getDocs,
  type DocumentData,
  type CollectionReference,
  type Query,
} from 'firebase/firestore';
import {useFirebaseApp} from '@/firebase/provider';
import {errorEmitter} from '@/firebase/error-emitter';
import {FirestorePermissionError} from '@/firebase/errors';

// A custom hook to listen to a collection in real time
export function useCollection<T extends DocumentData>(
  q: Query<T> | CollectionReference<T> | null
) {
  const [data, setData] = useState<T[] | null>(null);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<Error | null>(null);

  useEffect(() => {
    if (!q) {
      setData(null);
      setLoading(false);
      return;
    }

    const unsubscribe = onSnapshot(
      q,
      snapshot => {
        const data = snapshot.docs.map(
          doc => ({...doc.data(), id: doc.id}) as T
        );
        setData(data);
        setLoading(false);
      },
      err => {
        setError(err);
        setLoading(false);
        const permissionError = new FirestorePermissionError({
          path: 'path' in q ? q.path : 'unknown',
          operation: 'list',
        });
        errorEmitter.emit('permission-error', permissionError);
      }
    );

    return () => unsubscribe();
  }, [q]);

  return {data, loading, error};
}
