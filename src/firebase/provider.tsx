// DO NOT MANUALLY EDIT THIS FILE. IT IS AUTO-GENERATED BY FIREBASE STUDIO.
'use client';
import React, {createContext, useContext, useMemo} from 'react';
import type {FirebaseApp} from 'firebase/app';
import {getAuth, type Auth} from 'firebase/auth';
import {getFirestore, type Firestore} from 'firebase/firestore';

interface FirebaseContextValue {
  firebaseApp: FirebaseApp;
  auth: Auth;
  firestore: Firestore;
}

const FirebaseContext = createContext<FirebaseContextValue | undefined>(
  undefined
);

/**
 * `FirebaseProvider` provides the initialized firebase app and services to its children.
 * It is used by `FirebaseClientProvider` to ensure that firebase is initialized only once on the client.
 */
export function FirebaseProvider({
  children,
  firebaseApp,
  auth,
  firestore,
}: {
  children: React.ReactNode;
  firebaseApp: FirebaseApp;
  auth: Auth;
  firestore: Firestore;
}) {
  const value = useMemo(
    () => ({
      firebaseApp,
      auth,
      firestore,
    }),
    [firebaseApp, auth, firestore]
  );

  return (
    <FirebaseContext.Provider value={value}>
      {children}
    </FirebaseContext.Provider>
  );
}

/**
 * `useFirebase` is a hook that returns the initialized firebase app and services.
 * It must be used within a `FirebaseProvider` component.
 * @returns The initialized firebase app and services.
 * @throws An error if used outside of a `FirebaseProvider`.
 *
 * @example
 * ```tsx
 * import { useFirebase } from '@/firebase';
 *
 * function MyComponent() {
 *   const { firebaseApp, auth, firestore } = useFirebase();
 *   // ...
 * }
 * ```
 */
export function useFirebase() {
  const context = useContext(FirebaseContext);
  if (context === undefined) {
    throw new Error('useFirebase must be used within a FirebaseProvider');
  }
  return context;
}

/**
 * `useFirebaseApp` is a hook that returns the initialized firebase app.
 * It must be used within a `FirebaseProvider` component.
 * @returns The initialized firebase app.
 * @throws An error if used outside of a `FirebaseProvider`.
 *
 * @example
 * ```tsx
 * import { useFirebaseApp } from '@/firebase';
 *
 * function MyComponent() {
 *  const firebaseApp = useFirebaseApp();
 *  // ...
 * }
 * ```
 */
export function useFirebaseApp() {
  const {firebaseApp} = useFirebase();
  return firebaseApp;
}

/**
 * `useFirestore` is a hook that returns the initialized firestore instance.
 * It must be used within a `FirebaseProvider` component.
 * @returns The initialized firestore instance.
 * @throws An error if used outside of a `FirebaseProvider`.
 *
 * @example
 * ```tsx
 * import { useFirestore } from '@/firebase';
 *
 * function MyComponent() {
 *  const firestore = useFirestore();
 *  // ...
 * }
 * ```
 */
export function useFirestore() {
  const {firestore} = useFirebase();
  return firestore;
}

/**
 * `useAuth` is a hook that returns the initialized auth instance.
 * It must be used within a `FirebaseProvider` component.
 * @returns The initialized auth instance.
 * @throws An error if used outside of a `FirebaseProvider`.
 *
 * @example
 * ```tsx
 * import { useAuth } from '@/firebase';
 *
 * function MyComponent() {
 *  const auth = useAuth();
 *  // ...
 * }
 * ```
 */
export function useAuth() {
  const {auth} = useFirebase();
  return auth;
}
